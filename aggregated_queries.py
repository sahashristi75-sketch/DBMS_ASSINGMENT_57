# -*- coding: utf-8 -*-
"""aggregated_queries

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1o9VEudzNUONDZnZT_MfvI8eqFvcUFDO7
"""

import re

def nlq_to_sql_aggregate(nl_query):
    nl_query = nl_query.lower().strip()

    # Default SQL
    sql = "SELECT * FROM students;"

    # Aggregate mappings
    aggregates = {
        "average": "AVG",
        "avg": "AVG",
        "maximum": "MAX",
        "max": "MAX",
        "minimum": "MIN",
        "min": "MIN",
        "sum": "SUM",
        "total": "SUM",
        "count": "COUNT",
        "number of": "COUNT"
    }

    # Columns that may be targeted
    possible_columns = ["marks", "age", "grade", "students"]

    selected_agg = None
    selected_col = None

    # Detect aggregate keyword
    for word, sql_func in aggregates.items():
        if word in nl_query:
            selected_agg = sql_func
            break

    # Detect column
    for col in possible_columns:
        if col in nl_query:
            # Special case: count students → COUNT(*)
            if selected_agg == "COUNT" and col == "students":
                selected_col = "*"
            else:
                selected_col = col
            break

    # If aggregate found
    if selected_agg and selected_col:
        sql = f"SELECT {selected_agg}({selected_col}) FROM students;"

    return sql

def nlq_to_sql_aggregate(nl_query):
    nl_query = nl_query.lower().strip()

    # Default SQL
    sql = "SELECT * FROM students;"

    # Aggregate mappings
    aggregates = {
        "average": "AVG",
        "avg": "AVG",
        "maximum": "MAX",
        "max": "MAX",
        "minimum": "MIN",
        "min": "MIN",
        "sum": "SUM",
        "total": "SUM",
        "count": "COUNT",
        "number of": "COUNT"
    }

    # Columns that may be targeted
    possible_columns = ["marks", "age", "grade", "students"]

    selected_agg = None
    selected_col = None

    # Detect aggregate keyword
    for word, sql_func in aggregates.items():
        if word in nl_query:
            selected_agg = sql_func
            break

    # Detect column
    for col in possible_columns:
        if col in nl_query:
            # Special case: count students → COUNT(*)
            if selected_agg == "COUNT" and col == "students":
                selected_col = "*"
            else:
                selected_col = col
            break

    # If aggregate found
    if selected_agg and selected_col:
        sql = f"SELECT {selected_agg}({selected_col}) FROM students;"

    return sql

if __name__ == "__main__":
    print("Natural Language to SQL Converter (Aggregate Queries)")
    print("Examples:")
    print("- Show the average marks of students")
    print("- Find the maximum age")
    print("- Count number of students with grade A\n")

    user_query = input("Enter your query: ")
    sql_query = nlq_to_sql_aggregate(user_query)

    print("\nGenerated SQL Query:")
    print(sql_query)